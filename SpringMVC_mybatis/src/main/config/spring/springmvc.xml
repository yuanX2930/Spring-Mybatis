<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	
	<!-- 可以扫描controller service 等
	这里扫描controller
	 -->
	 <context:component-scan base-package="yx.ssm.controllor"></context:component-scan>

	<!-- 静态资源解析
    包括 ：js、css、img、..
     -->
	<mvc:resources location="/js/" mapping="/js/**"/>

	
     
  
	<!-- 使用mvc:annotation-driven可以代替上边的注解映射器和注解适配器
	mvc:annotation-driven默认加载了很多参数绑定方法，比如json转换解析器就默认加载了
	-->
	 <mvc:annotation-driven conversion-service="conversionService"
                            validator="validator"
	 >
    </mvc:annotation-driven>

	

	<!-- 处理器映射器 将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url) 所有的映射器都实现了HandlerMapping接口 -->
	<bean
		class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />



	

	<!-- 视图解析器 解析jsp,默认使用jstl,classpath下要有jstl的包 -->
	<!-- <bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
	配置jsp路径的前缀
        <property name="prefix" value="/WEB-INF/jsp" />
        配置jsp路径的后缀
        <property name="suffix" value=".jsp" />
	</bean>	
 -->
 
 <!-- 自定义参数绑定  将字符串转换成java.util.Data -->
  
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!-- 转换器 -->
        <property name="converters">
            <list>
                <!-- 日期类型转换 -->
                <bean class="yx.ssm.controllor.converter.CustomDateConverter"/>
            </list>
        </property>
    </bean>

<!-- 校验器 -->
	<bean id="validator"
	class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
	<!-- 校验器-->
	<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
	<!-- 指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties -->
	<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource"
	class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	<!-- 资源文件名-->
	<property name="basenames">
	<list>
	<value>erromessage</value>
	</list>
	</property>
	<!-- 资源文件编码格式 -->
	<property name="fileEncodings" value="utf-8" />
	<!-- 对资源文件内容缓存时间，单位秒 -->
	<property name="cacheSeconds" value="120" />

	</bean>

	<!-- 全局异常处理器
只要实现HandlerExceptionResolver接口就是全局异常处理器
-->
	<bean class="yx.ssm.exception.CustomExceptionResolver"></bean>

	<!-- 文件上传 -->
	<bean id="multipartResolver"
		  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件的最大尺寸为5MB -->
		<property name="maxUploadSize">
			<value>5242880</value>
		</property>
	</bean>

	<!--拦截器 -->
	<mvc:interceptors>

		<mvc:interceptor>
			<!-- d登录验证拦截器 -->
			<mvc:mapping path="/**"/>
			<bean class="yx.ssm.Interceptor.LoginIntercrptor"></bean>
		</mvc:interceptor>
		<!--&lt;!&ndash;多个拦截器,顺序执行 &ndash;&gt;-->
		<!--<mvc:interceptor>-->
			<!--&lt;!&ndash; /**表示所有url包括子url路径 &ndash;&gt;-->
			<!--<mvc:mapping path="/**"/>-->
			<!--<bean class="yx.ssm.Interceptor.HandlerInterceptor1"></bean>-->
		<!--</mvc:interceptor>-->
		<!--<mvc:interceptor>-->
			<!--<mvc:mapping path="/**"/>-->
			<!--<bean class="yx.ssm.Interceptor.HandlerInterceptor2"></bean>-->
		<!--</mvc:interceptor>-->
	</mvc:interceptors>







</beans>